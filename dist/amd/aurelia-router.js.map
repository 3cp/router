{"version":3,"file":"aurelia-router.js","sources":["../../src/navigation-commands.ts","../../src/navigation-plan.ts","../../src/activation.ts","../../src/navigation-instruction.ts","../../src/nav-model.ts","../../src/util.ts","../../src/router-configuration.ts","../../src/router.ts","../../src/next.ts","../../src/pipeline.ts","../../src/route-loading.ts","../../src/pipeline-provider.ts","../../src/app-router.ts","../../src/pipeline-status.ts","../../src/router-event.ts","../../src/pipeline-slot-name.ts"],"sourcesContent":["import { NavigationOptions } from 'aurelia-history';\nimport { Router } from './router';\n\n/**@internal */\ndeclare module 'aurelia-history' {\n  interface NavigationOptions {\n    useAppRouter?: boolean;\n  }\n}\n\n/**\n* When a navigation command is encountered, the current navigation\n* will be cancelled and control will be passed to the navigation\n* command so it can determine the correct action.\n*/\nexport interface NavigationCommand {\n  navigate: (router: Router) => void;\n  /**@internal */\n  shouldContinueProcessing?: boolean;\n  /**@internal */\n  setRouter?: (router: Router) => void;\n}\n\n/**\n* Determines if the provided object is a navigation command.\n* A navigation command is anything with a navigate method.\n*\n* @param obj The object to check.\n*/\nexport function isNavigationCommand(obj: any): obj is NavigationCommand {\n  return obj && typeof obj.navigate === 'function';\n}\n\n/**\n* Used during the activation lifecycle to cause a redirect.\n*/\nexport class Redirect implements NavigationCommand {\n\n  url: string;\n  /**@internal */\n  options: NavigationOptions;\n  /**@internal */\n  shouldContinueProcessing: boolean;\n\n  private router: Router;\n\n  /**\n   * @param url The URL fragment to use as the navigation destination.\n   * @param options The navigation options.\n   */\n  constructor(url: string, options: NavigationOptions = {}) {\n    this.url = url;\n    this.options = Object.assign({ trigger: true, replace: true }, options);\n    this.shouldContinueProcessing = false;\n  }\n\n  /**\n  * Called by the activation system to set the child router.\n  *\n  * @param router The router.\n  */\n  setRouter(router: Router): void {\n    this.router = router;\n  }\n\n  /**\n  * Called by the navigation pipeline to navigate.\n  *\n  * @param appRouter The router to be redirected.\n  */\n  navigate(appRouter: Router): void {\n    let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\n    navigatingRouter.navigate(this.url, this.options);\n  }\n}\n\n/**\n* Used during the activation lifecycle to cause a redirect to a named route.\n*/\nexport class RedirectToRoute implements NavigationCommand {\n\n  route: string;\n  params: any;\n  /**@internal */\n  options: NavigationOptions;\n\n  /**@internal */\n  shouldContinueProcessing: boolean;\n\n  /**@internal */\n  router: Router;\n\n  /**\n   * @param route The name of the route.\n   * @param params The parameters to be sent to the activation method.\n   * @param options The options to use for navigation.\n   */\n  constructor(route: string, params: any = {}, options: NavigationOptions = {}) {\n    this.route = route;\n    this.params = params;\n    this.options = Object.assign({ trigger: true, replace: true }, options);\n    this.shouldContinueProcessing = false;\n  }\n\n  /**\n  * Called by the activation system to set the child router.\n  *\n  * @param router The router.\n  */\n  setRouter(router: Router): void {\n    this.router = router;\n  }\n\n  /**\n  * Called by the navigation pipeline to navigate.\n  *\n  * @param appRouter The router to be redirected.\n  */\n  navigate(appRouter: Router): void {\n    let navigatingRouter = this.options.useAppRouter ? appRouter : (this.router || appRouter);\n    navigatingRouter.navigateToRoute(this.route, this.params, this.options);\n  }\n}\n","import { ActivationStrategy, Next, ViewPortPlan } from './interfaces';\nimport { Redirect } from './navigation-commands';\nimport { NavigationInstruction } from './navigation-instruction';\n\n/**\n* The strategy to use when activating modules during navigation.\n*/\nexport const activationStrategy: ActivationStrategy = {\n  noChange: 'no-change',\n  invokeLifecycle: 'invoke-lifecycle',\n  replace: 'replace'\n};\n\n/**\n * Transform a navigation instruction into viewport plan record object,\n * or a redirect request if user viewmodel demands\n */\nexport class BuildNavigationPlanStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return _buildNavigationPlan(navigationInstruction)\n      .then(plan => {\n        if (plan instanceof Redirect) {\n          return next.cancel(plan);\n        }\n        navigationInstruction.plan = plan;\n        return next();\n      })\n      .catch(next.cancel);\n  }\n}\n\nexport function _buildNavigationPlan(\n  instruction: NavigationInstruction,\n  forceLifecycleMinimum?: boolean\n): Promise<Record<string, ViewPortPlan> | Redirect> {\n  let config = instruction.config;\n\n  // todo: separate and export for unit tests\n  if ('redirect' in config) {\n    const router = instruction.router;\n    return router\n      ._createNavigationInstruction(config.redirect)\n      .then(newInstruction => {\n        const params: Record<string, any> = {};\n        for (let key in newInstruction.params) {\n          // If the param on the redirect points to another param, e.g. { route: first/:this, redirect: second/:this }\n          let val = newInstruction.params[key];\n          if (typeof val === 'string' && val[0] === ':') {\n            val = val.slice(1);\n            // And if that param is found on the original instruction then use it\n            if (val in instruction.params) {\n              params[key] = instruction.params[val];\n            }\n          } else {\n            params[key] = newInstruction.params[key];\n          }\n        }\n        let redirectLocation = router.generate(newInstruction.config, params, instruction.options);\n\n        // Special handling for child routes\n        for (let key in instruction.params) {\n          redirectLocation = redirectLocation.replace(`:${key}`, instruction.params[key]);\n        }\n\n        if (instruction.queryString) {\n          redirectLocation += '?' + instruction.queryString;\n        }\n\n        return Promise.resolve(new Redirect(redirectLocation));\n      });\n  }\n\n  const prev = instruction.previousInstruction;\n  const plan: Record<string, ViewPortPlan> = {};\n  const defaults = instruction.router.viewPortDefaults;\n\n  if (prev) {\n    let newParams = hasDifferentParameterValues(prev, instruction);\n    let pending: Promise<void>[] = [];\n\n    for (let viewPortName in prev.viewPortInstructions) {\n      const prevViewPortInstruction = prev.viewPortInstructions[viewPortName];\n      let nextViewPortConfig = viewPortName in config.viewPorts ? config.viewPorts[viewPortName] : prevViewPortInstruction;\n      if (nextViewPortConfig.moduleId === null && viewPortName in instruction.router.viewPortDefaults) {\n        nextViewPortConfig = defaults[viewPortName];\n      }\n\n      const viewPortPlan = plan[viewPortName] = {\n        name: viewPortName,\n        config: nextViewPortConfig,\n        prevComponent: prevViewPortInstruction.component,\n        prevModuleId: prevViewPortInstruction.moduleId\n      } as ViewPortPlan;\n\n      if (prevViewPortInstruction.moduleId !== nextViewPortConfig.moduleId) {\n        viewPortPlan.strategy = activationStrategy.replace;\n      } else if ('determineActivationStrategy' in prevViewPortInstruction.component.viewModel) {\n        viewPortPlan.strategy = prevViewPortInstruction.component.viewModel\n          .determineActivationStrategy(...instruction.lifecycleArgs);\n      } else if (config.activationStrategy) {\n        viewPortPlan.strategy = config.activationStrategy;\n      } else if (newParams || forceLifecycleMinimum) {\n        viewPortPlan.strategy = activationStrategy.invokeLifecycle;\n      } else {\n        viewPortPlan.strategy = activationStrategy.noChange;\n      }\n\n      if (viewPortPlan.strategy !== activationStrategy.replace && prevViewPortInstruction.childRouter) {\n        const path = instruction.getWildcardPath();\n        const task: Promise<void> = prevViewPortInstruction\n          .childRouter\n          ._createNavigationInstruction(path, instruction)\n          .then((childInstruction: any) => {\n            viewPortPlan.childNavigationInstruction = childInstruction;\n\n            return _buildNavigationPlan(\n              childInstruction,\n              viewPortPlan.strategy === activationStrategy.invokeLifecycle\n            )\n              .then(childPlan => {\n                if (childPlan instanceof Redirect) {\n                  return Promise.reject(childPlan);\n                }\n                childInstruction.plan = childPlan;\n                // for bluebird ?\n                return null;\n              });\n          });\n\n        pending.push(task);\n      }\n    }\n\n    return Promise.all(pending).then(() => plan);\n  }\n\n  for (let viewPortName in config.viewPorts) {\n    let viewPortConfig = config.viewPorts[viewPortName];\n    if (viewPortConfig.moduleId === null && viewPortName in instruction.router.viewPortDefaults) {\n      viewPortConfig = defaults[viewPortName];\n    }\n    plan[viewPortName] = {\n      name: viewPortName,\n      strategy: activationStrategy.replace,\n      config: viewPortConfig\n    };\n  }\n\n  return Promise.resolve(plan);\n}\n\nfunction hasDifferentParameterValues(prev: NavigationInstruction, next: NavigationInstruction): boolean {\n  let prevParams = prev.params;\n  let nextParams = next.params;\n  let nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;\n\n  for (let key in nextParams) {\n    if (key === nextWildCardName) {\n      continue;\n    }\n\n    if (prevParams[key] !== nextParams[key]) {\n      return true;\n    }\n  }\n\n  for (let key in prevParams) {\n    if (key === nextWildCardName) {\n      continue;\n    }\n\n    if (prevParams[key] !== nextParams[key]) {\n      return true;\n    }\n  }\n\n  if (!next.options.compareQueryParams) {\n    return false;\n  }\n\n  let prevQueryParams = prev.queryParams;\n  let nextQueryParams = next.queryParams;\n  for (let key in nextQueryParams) {\n    if (prevQueryParams[key] !== nextQueryParams[key]) {\n      return true;\n    }\n  }\n\n  for (let key in prevQueryParams) {\n    if (prevQueryParams[key] !== nextQueryParams[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","import { Next, ViewPortComponent, ViewPortPlan, ViewPortInstruction, LifecycleArguments } from './interfaces';\nimport { isNavigationCommand } from './navigation-commands';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { activationStrategy } from './navigation-plan';\nimport { Router } from './router';\n\n/**\n * A pipeline step responsible for finding and activating method `canDeactivate` on a view model of a route\n */\nexport class CanDeactivatePreviousStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processDeactivatable(navigationInstruction, 'canDeactivate', next);\n  }\n}\n\n/**\n * A pipeline step responsible for finding and activating method `canActivate` on a view model of a route\n */\nexport class CanActivateNextStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processActivatable(navigationInstruction, 'canActivate', next);\n  }\n}\n\n/**\n * A pipeline step responsible for finding and activating method `deactivate` on a view model of a route\n */\nexport class DeactivatePreviousStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processDeactivatable(navigationInstruction, 'deactivate', next, true);\n  }\n}\n\n/**\n * A pipeline step responsible for finding and activating method `activate` on a view model of a route\n */\nexport class ActivateNextStep {\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return processActivatable(navigationInstruction, 'activate', next, true);\n  }\n}\n\n/**\n * Recursively find list of deactivate-able view models\n * and invoke the either 'canDeactivate' or 'deactivate' on each\n */\nconst processDeactivatable = (\n  navigationInstruction: NavigationInstruction,\n  callbackName: 'canDeactivate' | 'deactivate',\n  next: Next,\n  ignoreResult?: boolean\n): Promise<any> => {\n  let plan: Record<string, ViewPortPlan> = navigationInstruction.plan;\n  let infos = findDeactivatable(plan, callbackName);\n  let i = infos.length; // query from inside out\n\n  function inspect(val: any): Promise<any> {\n    if (ignoreResult || shouldContinue(val)) {\n      return iterate();\n    }\n\n    return next.cancel(val);\n  }\n\n  function iterate(): Promise<any> {\n    if (i--) {\n      try {\n        let viewModel = infos[i];\n        let result = viewModel[callbackName](navigationInstruction);\n        return processPotential(result, inspect, next.cancel);\n      } catch (error) {\n        return next.cancel(error);\n      }\n    }\n\n    navigationInstruction.router.couldDeactivate = true;\n\n    return next();\n  }\n\n  return iterate();\n};\n\n/**\n * Recursively find and returns a list of deactivate-able view models\n */\nconst findDeactivatable = (\n  plan: Record<string, ViewPortPlan>,\n  callbackName: string,\n  list: IActivatableInfo[] = []\n): any[] => {\n  for (let viewPortName in plan) {\n    let viewPortPlan = plan[viewPortName];\n    let prevComponent = viewPortPlan.prevComponent;\n\n    if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace)\n      && prevComponent\n    ) {\n      let viewModel = prevComponent.viewModel;\n\n      if (callbackName in viewModel) {\n        list.push(viewModel);\n      }\n    }\n\n    if (viewPortPlan.strategy === activationStrategy.replace && prevComponent) {\n      addPreviousDeactivatable(prevComponent, callbackName, list);\n    } else if (viewPortPlan.childNavigationInstruction) {\n      findDeactivatable(viewPortPlan.childNavigationInstruction.plan, callbackName, list);\n    }\n  }\n\n  return list;\n};\n\nconst addPreviousDeactivatable = (\n  component: ViewPortComponent,\n  callbackName: string,\n  list: IActivatableInfo[]\n): void => {\n  let childRouter = component.childRouter;\n\n  if (childRouter && childRouter.currentInstruction) {\n    let viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;\n\n    for (let viewPortName in viewPortInstructions) {\n      let viewPortInstruction = viewPortInstructions[viewPortName];\n      let prevComponent = viewPortInstruction.component;\n      let prevViewModel = prevComponent.viewModel;\n\n      if (callbackName in prevViewModel) {\n        list.push(prevViewModel);\n      }\n\n      addPreviousDeactivatable(prevComponent, callbackName, list);\n    }\n  }\n};\n\nconst processActivatable = (\n  navigationInstruction: NavigationInstruction,\n  callbackName: 'canActivate' | 'activate',\n  next: Next,\n  ignoreResult?: boolean\n): Promise<any> => {\n  let infos = findActivatable(navigationInstruction, callbackName);\n  let length = infos.length;\n  let i = -1; // query from top down\n\n  function inspect(val: any, router: Router): Promise<any> {\n    if (ignoreResult || shouldContinue(val, router)) {\n      return iterate();\n    }\n\n    return next.cancel(val);\n  }\n\n  function iterate(): Promise<any> {\n    i++;\n\n    if (i < length) {\n      try {\n        let current = infos[i];\n        let result = current.viewModel[callbackName](...current.lifecycleArgs);\n        return processPotential(result, (val: any) => inspect(val, current.router), next.cancel);\n      } catch (error) {\n        return next.cancel(error);\n      }\n    }\n\n    return next();\n  }\n\n  return iterate();\n};\n\ninterface IActivatableInfo {\n  viewModel: any;\n  lifecycleArgs: LifecycleArguments;\n  router: Router;\n}\n\n/**\n * Find list of activatable view model and add to list (3rd parameter)\n */\nconst findActivatable = (\n  navigationInstruction: NavigationInstruction,\n  callbackName: 'canActivate' | 'activate',\n  list: IActivatableInfo[] = [],\n  router?: Router\n): IActivatableInfo[] => {\n  let plan: Record<string, ViewPortPlan> = navigationInstruction.plan;\n\n  Object\n    .keys(plan)\n    .forEach((viewPortName) => {\n      let viewPortPlan = plan[viewPortName];\n      let viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName] as ViewPortInstruction;\n      let viewPortComponent = viewPortInstruction.component;\n      let viewModel = viewPortComponent.viewModel;\n\n      if (\n        (viewPortPlan.strategy === activationStrategy.invokeLifecycle\n          || viewPortPlan.strategy === activationStrategy.replace\n        )\n        && callbackName in viewModel\n      ) {\n        list.push({\n          viewModel,\n          lifecycleArgs: viewPortInstruction.lifecycleArgs,\n          router\n        });\n      }\n\n      let childNavInstruction = viewPortPlan.childNavigationInstruction;\n\n      if (childNavInstruction) {\n        findActivatable(\n          childNavInstruction,\n          callbackName,\n          list,\n          viewPortComponent.childRouter || router\n        );\n      }\n    });\n\n  return list;\n};\n\nconst shouldContinue = <T = any>(output: T, router?: Router): boolean | T => {\n  if (output instanceof Error) {\n    return false;\n  }\n\n  if (isNavigationCommand(output)) {\n    if (typeof output.setRouter === 'function') {\n      output.setRouter(router);\n    }\n\n    return !!output.shouldContinueProcessing;\n  }\n\n  if (output === undefined) {\n    return true;\n  }\n\n  return output;\n};\n\n/**\n * A basic interface for an Observable type\n */\nexport interface IObservable {\n  subscribe(sub?: IObservableConfig): ISubscription;\n}\n\nexport interface IObservableConfig {\n  next(): void;\n  error(err?: any): void;\n  complete(): void;\n}\n\n/**\n * A basic interface for a Subscription to an Observable\n */\ninterface ISubscription {\n  unsubscribe(): void;\n}\n\ntype SafeSubscriptionFunc = (sub: SafeSubscription) => ISubscription;\n\n/**\n * wraps a subscription, allowing unsubscribe calls even if\n * the first value comes synchronously\n */\nclass SafeSubscription {\n\n  private _subscribed: boolean;\n  private _subscription: ISubscription;\n\n  constructor(subscriptionFunc: SafeSubscriptionFunc) {\n    this._subscribed = true;\n    this._subscription = subscriptionFunc(this);\n\n    if (!this._subscribed) {\n      this.unsubscribe();\n    }\n  }\n\n  get subscribed(): boolean {\n    return this._subscribed;\n  }\n\n  unsubscribe(): void {\n    if (this._subscribed && this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    this._subscribed = false;\n  }\n}\n\n/**\n * A function to process return value from `activate`/`canActivate` steps\n * Supports observable/promise\n *\n * For observable, resolve at first next() or on complete()\n */\nconst processPotential = (obj: any, resolve: (val?: any) => any, reject: (err?: any) => any): any => {\n  // if promise like\n  if (obj && typeof obj.then === 'function') {\n    return Promise.resolve(obj).then(resolve).catch(reject);\n  }\n\n  // if observable\n  if (obj && typeof obj.subscribe === 'function') {\n    let obs: IObservable = obj;\n    return new SafeSubscription(sub => obs.subscribe({\n      next() {\n        if (sub.subscribed) {\n          sub.unsubscribe();\n          resolve(obj);\n        }\n      },\n      error(error) {\n        if (sub.subscribed) {\n          sub.unsubscribe();\n          reject(error);\n        }\n      },\n      complete() {\n        if (sub.subscribed) {\n          sub.unsubscribe();\n          resolve(obj);\n        }\n      }\n    }));\n  }\n\n  // else just resolve\n  try {\n    return resolve(obj);\n  } catch (error) {\n    return reject(error);\n  }\n};\n","import { ViewPortInstruction, RouteConfig, ViewPort, LifecycleArguments, ActivationStrategyType } from './interfaces';\nimport { Router } from './router';\nimport { activationStrategy } from './navigation-plan';\n\n/**\n * Initialization options for a navigation instruction\n */\nexport interface NavigationInstructionInit {\n  fragment: string;\n  queryString?: string;\n  params?: Record<string, any>;\n  queryParams?: Record<string, any>;\n  config: RouteConfig;\n  parentInstruction?: NavigationInstruction;\n  previousInstruction?: NavigationInstruction;\n  router: Router;\n  options?: Object;\n  plan?: Record<string, /*ViewPortInstruction*/any>;\n}\n\n/**\n * A pipeline step for instructing a piepline to commit changes on a navigation instruction\n */\nexport class CommitChangesStep {\n  run(navigationInstruction: NavigationInstruction, next: Function): Promise<any> {\n    return navigationInstruction\n      ._commitChanges(/*wait to swap?*/true)\n      .then(() => {\n        navigationInstruction._updateTitle();\n        return next();\n      });\n  }\n}\n\n/**\n* Class used to represent an instruction during a navigation.\n*/\nexport class NavigationInstruction {\n  /**\n  * The URL fragment.\n  */\n  fragment: string;\n\n  /**\n  * The query string.\n  */\n  queryString: string;\n\n  /**\n  * Parameters extracted from the route pattern.\n  */\n  params: any;\n\n  /**\n  * Parameters extracted from the query string.\n  */\n  queryParams: any;\n\n  /**\n  * The route config for the route matching this instruction.\n  */\n  config: RouteConfig;\n\n  /**\n  * The parent instruction, if this instruction was created by a child router.\n  */\n  parentInstruction: NavigationInstruction;\n\n  parentCatchHandler: any;\n\n  /**\n  * The instruction being replaced by this instruction in the current router.\n  */\n  previousInstruction: NavigationInstruction;\n\n  /**\n  * viewPort instructions to used activation.\n  */\n  viewPortInstructions: Record<string, /*ViewPortInstruction*/any>;\n\n  /**\n    * The router instance.\n  */\n  router: Router;\n\n  /**\n   * Current built viewport plan of this nav instruction\n   */\n  plan: Record<string, /*ViewPortPlan*/any> = null;\n\n  options: Record<string, any> = {};\n\n  /**@internal */\n  lifecycleArgs: LifecycleArguments;\n  /**@internal */\n  resolve?: (val?: any) => void;\n\n  constructor(init: NavigationInstructionInit) {\n    Object.assign(this, init);\n\n    this.params = this.params || {};\n    this.viewPortInstructions = {};\n\n    let ancestorParams = [];\n    let current: NavigationInstruction = this;\n    do {\n      let currentParams = Object.assign({}, current.params);\n      if (current.config && current.config.hasChildRouter) {\n        // remove the param for the injected child route segment\n        delete currentParams[current.getWildCardName()];\n      }\n\n      ancestorParams.unshift(currentParams);\n      current = current.parentInstruction;\n    } while (current);\n\n    let allParams = Object.assign({}, this.queryParams, ...ancestorParams);\n    this.lifecycleArgs = [allParams, this.config, this];\n  }\n\n  /**\n  * Gets an array containing this instruction and all child instructions for the current navigation.\n  */\n  getAllInstructions(): Array<NavigationInstruction> {\n    let instructions: NavigationInstruction[] = [this];\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\n\n    for (let key in viewPortInstructions) {\n      let childInstruction = viewPortInstructions[key].childNavigationInstruction;\n      if (childInstruction) {\n        instructions.push(...childInstruction.getAllInstructions());\n      }\n    }\n\n    return instructions;\n  }\n\n  /**\n  * Gets an array containing the instruction and all child instructions for the previous navigation.\n  * Previous instructions are no longer available after navigation completes.\n  */\n  getAllPreviousInstructions(): Array<NavigationInstruction> {\n    return this.getAllInstructions().map(c => c.previousInstruction).filter(c => c);\n  }\n\n  /**\n  * Adds a viewPort instruction. Returns the newly created instruction based on parameters\n  */\n  addViewPortInstruction(name: string, strategy: ActivationStrategyType, moduleId: string, component: any): /*ViewPortInstruction*/ any {\n    const lifecycleArgs = this.lifecycleArgs;\n    const config: RouteConfig = Object.assign({}, lifecycleArgs[1], { currentViewPort: name });\n    const viewportInstruction = this.viewPortInstructions[name] = {\n      name: name,\n      strategy: strategy,\n      moduleId: moduleId,\n      component: component,\n      childRouter: component.childRouter,\n      lifecycleArgs: [].concat(lifecycleArgs[0], config, lifecycleArgs[2]) as LifecycleArguments\n    };\n\n    return viewportInstruction;\n  }\n\n  /**\n  * Gets the name of the route pattern's wildcard parameter, if applicable.\n  */\n  getWildCardName(): string {\n    // todo: potential issue, or at least unsafe typings\n    let configRoute = this.config.route as string;\n    let wildcardIndex = configRoute.lastIndexOf('*');\n    return configRoute.substr(wildcardIndex + 1);\n  }\n\n  /**\n  * Gets the path and query string created by filling the route\n  * pattern's wildcard parameter with the matching param.\n  */\n  getWildcardPath(): string {\n    let wildcardName = this.getWildCardName();\n    let path = this.params[wildcardName] || '';\n    let queryString = this.queryString;\n\n    if (queryString) {\n      path += '?' + queryString;\n    }\n\n    return path;\n  }\n\n  /**\n  * Gets the instruction's base URL, accounting for wildcard route parameters.\n  */\n  getBaseUrl(): string {\n    let $encodeURI = encodeURI;\n    let fragment = decodeURI(this.fragment);\n\n    if (fragment === '') {\n      let nonEmptyRoute = this.router.routes.find(route => {\n        return route.name === this.config.name &&\n          route.route !== '';\n      });\n      if (nonEmptyRoute) {\n        fragment = nonEmptyRoute.route as any;\n      }\n    }\n\n    if (!this.params) {\n      return $encodeURI(fragment);\n    }\n\n    let wildcardName = this.getWildCardName();\n    let path = this.params[wildcardName] || '';\n\n    if (!path) {\n      return $encodeURI(fragment);\n    }\n\n    return $encodeURI(fragment.substr(0, fragment.lastIndexOf(path)));\n  }\n\n  /**@internal */\n  _commitChanges(waitToSwap: boolean): Promise<void> {\n    let router = this.router;\n    router.currentInstruction = this;\n\n    const previousInstruction = this.previousInstruction;\n    if (previousInstruction) {\n      previousInstruction.config.navModel.isActive = false;\n    }\n\n    this.config.navModel.isActive = true;\n\n    router.refreshNavigation();\n\n    let loads: Promise<void>[] = [];\n    let delaySwaps: ISwapPlan[] = [];\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\n\n    for (let viewPortName in viewPortInstructions) {\n      let viewPortInstruction = viewPortInstructions[viewPortName];\n      let viewPort = router.viewPorts[viewPortName];\n\n      if (!viewPort) {\n        throw new Error(`There was no router-view found in the view for ${viewPortInstruction.moduleId}.`);\n      }\n\n      let child_nav_instruction = viewPortInstruction.childNavigationInstruction;\n      if (viewPortInstruction.strategy === activationStrategy.replace) {\n        if (child_nav_instruction && child_nav_instruction.parentCatchHandler) {\n          loads.push(child_nav_instruction._commitChanges(waitToSwap));\n        } else {\n          if (waitToSwap) {\n            delaySwaps.push({ viewPort, viewPortInstruction });\n          }\n          loads.push(\n            viewPort\n              .process(viewPortInstruction, waitToSwap)\n              .then(() => child_nav_instruction\n                ? child_nav_instruction._commitChanges(waitToSwap)\n                : Promise.resolve()\n              )\n          );\n        }\n      } else {\n        if (child_nav_instruction) {\n          loads.push(child_nav_instruction._commitChanges(waitToSwap));\n        }\n      }\n    }\n\n    return Promise\n      .all(loads)\n      .then(() => {\n        delaySwaps.forEach(x => x.viewPort.swap(x.viewPortInstruction));\n        return null;\n      })\n      .then(() => prune(this));\n  }\n\n  /**@internal */\n  _updateTitle(): void {\n    let router = this.router;\n    let title = this._buildTitle(router.titleSeparator);\n    if (title) {\n      router.history.setTitle(title);\n    }\n  }\n\n  /**@internal */\n  _buildTitle(separator: string = ' | '): string {\n    let title = '';\n    let childTitles = [];\n    let navModelTitle = this.config.navModel.title;\n    let instructionRouter = this.router;\n    let viewPortInstructions: Record<string, ViewPortInstruction> = this.viewPortInstructions;\n\n    if (navModelTitle) {\n      title = instructionRouter.transformTitle(navModelTitle);\n    }\n\n    for (let viewPortName in viewPortInstructions) {\n      let viewPortInstruction = viewPortInstructions[viewPortName];\n      let child_nav_instruction = viewPortInstruction.childNavigationInstruction;\n\n      if (child_nav_instruction) {\n        let childTitle = child_nav_instruction._buildTitle(separator);\n        if (childTitle) {\n          childTitles.push(childTitle);\n        }\n      }\n    }\n\n    if (childTitles.length) {\n      title = childTitles.join(separator) + (title ? separator : '') + title;\n    }\n\n    if (instructionRouter.title) {\n      title += (title ? separator : '') + instructionRouter.transformTitle(instructionRouter.title);\n    }\n\n    return title;\n  }\n}\n\nconst prune = (instruction: NavigationInstruction): void => {\n  instruction.previousInstruction = null;\n  instruction.plan = null;\n};\n\ninterface ISwapPlan {\n  viewPort: ViewPort;\n  viewPortInstruction: ViewPortInstruction;\n}\n","import { Router } from './router';\nimport { RouteConfig } from './interfaces';\n\n/**\n* Class for storing and interacting with a route's navigation settings.\n*/\nexport class NavModel {\n\n  /**\n  * True if this nav item is currently active.\n  */\n  isActive: boolean = false;\n\n  /**\n  * The title.\n  */\n  title: string = null;\n\n  /**\n  * This nav item's absolute href.\n  */\n  href: string = null;\n\n  /**\n  * This nav item's relative href.\n  */\n  relativeHref: string = null;\n\n  /**\n  * Data attached to the route at configuration time.\n  */\n  settings: any = {};\n\n  /**\n  * The route config.\n  */\n  config: RouteConfig = null;\n\n  /**\n  * The router associated with this navigation model.\n  */\n  router: Router;\n\n  order: number | boolean;\n\n  constructor(router: Router, relativeHref: string) {\n    this.router = router;\n    this.relativeHref = relativeHref;\n  }\n\n  /**\n  * Sets the route's title and updates document.title.\n  *  If the a navigation is in progress, the change will be applied\n  *  to document.title when the navigation completes.\n  *\n  * @param title The new title.\n  */\n  setTitle(title: string): void {\n    this.title = title;\n\n    if (this.isActive) {\n      this.router.updateTitle();\n    }\n  }\n}\n","import { RouteConfig } from './interfaces';\n\nexport function _normalizeAbsolutePath(path: string, hasPushState: boolean, absolute: boolean = false) {\n  if (!hasPushState && path[0] !== '#') {\n    path = '#' + path;\n  }\n\n  if (hasPushState && absolute) {\n    path = path.substring(1, path.length);\n  }\n\n  return path;\n}\n\nexport function _createRootedPath(fragment: string, baseUrl: string, hasPushState: boolean, absolute?: boolean) {\n  if (isAbsoluteUrl.test(fragment)) {\n    return fragment;\n  }\n\n  let path = '';\n\n  if (baseUrl.length && baseUrl[0] !== '/') {\n    path += '/';\n  }\n\n  path += baseUrl;\n\n  if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {\n    path += '/';\n  }\n\n  if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {\n    path = path.substring(0, path.length - 1);\n  }\n\n  return _normalizeAbsolutePath(path + fragment, hasPushState, absolute);\n}\n\nexport function _resolveUrl(fragment: string, baseUrl: string, hasPushState?: boolean) {\n  if (isRootedPath.test(fragment)) {\n    return _normalizeAbsolutePath(fragment, hasPushState);\n  }\n\n  return _createRootedPath(fragment, baseUrl, hasPushState);\n}\n\nexport function _ensureArrayWithSingleRoutePerConfig(config: RouteConfig) {\n  let routeConfigs = [];\n\n  if (Array.isArray(config.route)) {\n    for (let i = 0, ii = config.route.length; i < ii; ++i) {\n      let current = Object.assign({}, config);\n      current.route = config.route[i];\n      routeConfigs.push(current);\n    }\n  } else {\n    routeConfigs.push(Object.assign({}, config));\n  }\n\n  return routeConfigs;\n}\n\nconst isRootedPath = /^#?\\//;\nconst isAbsoluteUrl = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\n","import { RouteConfig, PipelineStep, RouteConfigSpecifier } from './interfaces';\nimport { _ensureArrayWithSingleRoutePerConfig } from './util';\nimport { Router } from './router';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { PipelineSlotName } from './pipeline-slot-name';\n\n/**\n * Class used to configure a [[Router]] instance.\n *\n * @constructor\n */\nexport class RouterConfiguration {\n  instructions: Array<(router: Router) => void> = [];\n  options: {\n    [key: string]: any;\n    compareQueryParams?: boolean;\n    root?: string;\n    pushState?: boolean;\n    hashChange?: boolean;\n    silent?: boolean;\n  } = {};\n  pipelineSteps: Array<{ name: string, step: Function | PipelineStep }> = [];\n  title: string;\n  titleSeparator: string;\n  unknownRouteConfig: RouteConfigSpecifier;\n  viewPortDefaults: Record<string, any>;\n\n  /**@internal */\n  _fallbackRoute: string;\n\n  /**\n  * Adds a step to be run during the [[Router]]'s navigation pipeline.\n  *\n  * @param name The name of the pipeline slot to insert the step into.\n  * @param step The pipeline step.\n  * @chainable\n  */\n  addPipelineStep(name: string, step: Function | PipelineStep): RouterConfiguration {\n    if (step === null || step === undefined) {\n      throw new Error('Pipeline step cannot be null or undefined.');\n    }\n    this.pipelineSteps.push({ name, step });\n    return this;\n  }\n\n  /**\n  * Adds a step to be run during the [[Router]]'s authorize pipeline slot.\n  *\n  * @param step The pipeline step.\n  * @chainable\n  */\n  addAuthorizeStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.Authorize, step);\n  }\n\n  /**\n  * Adds a step to be run during the [[Router]]'s preActivate pipeline slot.\n  *\n  * @param step The pipeline step.\n  * @chainable\n  */\n  addPreActivateStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.PreActivate, step);\n  }\n\n  /**\n  * Adds a step to be run during the [[Router]]'s preRender pipeline slot.\n  *\n  * @param step The pipeline step.\n  * @chainable\n  */\n  addPreRenderStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.PreRender, step);\n  }\n\n  /**\n  * Adds a step to be run during the [[Router]]'s postRender pipeline slot.\n  *\n  * @param step The pipeline step.\n  * @chainable\n  */\n  addPostRenderStep(step: Function | PipelineStep): RouterConfiguration {\n    return this.addPipelineStep(PipelineSlotName.PostRender, step);\n  }\n\n  /**\n  * Configures a route that will be used if there is no previous location available on navigation cancellation.\n  *\n  * @param fragment The URL fragment to use as the navigation destination.\n  * @chainable\n  */\n  fallbackRoute(fragment: string): RouterConfiguration {\n    this._fallbackRoute = fragment;\n    return this;\n  }\n\n  /**\n  * Maps one or more routes to be registered with the router.\n  *\n  * @param route The [[RouteConfig]] to map, or an array of [[RouteConfig]] to map.\n  * @chainable\n  */\n  map(route: RouteConfig | RouteConfig[]): RouterConfiguration {\n    if (Array.isArray(route)) {\n      route.forEach(this.map.bind(this));\n      return this;\n    }\n\n    return this.mapRoute(route);\n  }\n\n  /**\n   * Configures defaults to use for any view ports.\n   *\n   * @param viewPortConfig a view port configuration object to use as a\n   *  default, of the form { viewPortName: { moduleId } }.\n   * @chainable\n   */\n  useViewPortDefaults(viewPortConfig: Record<string, { [key: string]: any; moduleId: string }>): RouterConfiguration {\n    this.viewPortDefaults = viewPortConfig;\n    return this;\n  }\n\n  /**\n  * Maps a single route to be registered with the router.\n  *\n  * @param route The [[RouteConfig]] to map.\n  * @chainable\n  */\n  mapRoute(config: RouteConfig): RouterConfiguration {\n    this.instructions.push(router => {\n      let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\n\n      let navModel;\n      for (let i = 0, ii = routeConfigs.length; i < ii; ++i) {\n        let routeConfig = routeConfigs[i];\n        routeConfig.settings = routeConfig.settings || {};\n        if (!navModel) {\n          navModel = router.createNavModel(routeConfig);\n        }\n\n        router.addRoute(routeConfig, navModel);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n  * Registers an unknown route handler to be run when the URL fragment doesn't match any registered routes.\n  *\n  * @param config A string containing a moduleId to load, or a [[RouteConfig]], or a function that takes the\n  *  [[NavigationInstruction]] and selects a moduleId to load.\n  * @chainable\n  */\n  mapUnknownRoutes(config: RouteConfigSpecifier): RouterConfiguration {\n    this.unknownRouteConfig = config;\n    return this;\n  }\n\n  /**\n  * Applies the current configuration to the specified [[Router]].\n  *\n  * @param router The [[Router]] to apply the configuration to.\n  */\n  exportToRouter(router: Router): void {\n    let instructions = this.instructions;\n    for (let i = 0, ii = instructions.length; i < ii; ++i) {\n      instructions[i](router);\n    }\n\n    if (this.title) {\n      router.title = this.title;\n    }\n\n    if (this.titleSeparator) {\n      router.titleSeparator = this.titleSeparator;\n    }\n\n    if (this.unknownRouteConfig) {\n      router.handleUnknownRoutes(this.unknownRouteConfig);\n    }\n\n    if (this._fallbackRoute) {\n      router.fallbackRoute = this._fallbackRoute;\n    }\n\n    if (this.viewPortDefaults) {\n      router.useViewPortDefaults(this.viewPortDefaults);\n    }\n\n    Object.assign(router.options, this.options);\n\n    let pipelineSteps = this.pipelineSteps;\n    if (pipelineSteps.length) {\n      if (!router.isRoot) {\n        throw new Error('Pipeline steps can only be added to the root router');\n      }\n\n      let pipelineProvider = router.pipelineProvider;\n      for (let i = 0, ii = pipelineSteps.length; i < ii; ++i) {\n        let { name, step } = pipelineSteps[i];\n        pipelineProvider.addStep(name, step);\n      }\n    }\n  }\n}\n","import { RouteRecognizer, RouteHandler, ConfigurableRoute, State, RecognizedRoute } from 'aurelia-route-recognizer';\nimport { Container } from 'aurelia-dependency-injection';\nimport { History, NavigationOptions } from 'aurelia-history';\nimport { NavigationInstruction, NavigationInstructionInit } from './navigation-instruction';\nimport { NavModel } from './nav-model';\nimport { RouterConfiguration } from './router-configuration';\nimport {\n  _ensureArrayWithSingleRoutePerConfig,\n  _normalizeAbsolutePath,\n  _createRootedPath,\n  _resolveUrl\n} from './util';\nimport { RouteConfig, NavigationResult, RouteConfigSpecifier, ViewPort, ViewPortInstruction } from './interfaces';\nimport { PipelineProvider } from './pipeline-provider';\n\n/**@internal */\ndeclare module 'aurelia-history' {\n  interface History {\n    // This is wrong, as it's an implementation detail from aurelia-history-browser\n    // but we are poking it in here so probably will need to make it official in `aurelia-history`\n    /**\n     * A private flag of Aurelia History implementation to indicate if push state should be used\n     */\n    _hasPushState: boolean;\n\n    previousLocation: string;\n  }\n}\n\n/**@internal */\ndeclare module 'aurelia-route-recognizer' {\n  interface State {\n    types: {\n      dynamics: DynamicSegment;\n      stars: StarSegment;\n    };\n  }\n\n  interface RouteHandler {\n    navigationStrategy?: (instruction: NavigationInstruction) => any;\n  }\n\n  interface RecognizedRoute {\n    config?: RouteConfig;\n    queryParams?: Record<string, any>;\n  }\n}\n\ntype RouterConfigurationResolution = RouterConfiguration | ((cfg: RouterConfiguration) => void | RouterConfiguration | Promise<RouterConfiguration>);\n\n/**\n * The primary class responsible for handling routing and navigation.\n */\nexport class Router {\n\n  /**\n   * Container associated with this router. Also used to create child container for creating child router.\n   */\n  container: Container;\n\n  /**\n   * History instance of Aurelia abstract class for wrapping platform history global object\n   */\n  history: History;\n\n  /**\n   * A registry of registered viewport. Will be used to handle process navigation instruction route loading\n   * and dom swapping\n   */\n  viewPorts: Record<string, any>;\n\n  /**\n   * List of route configs registered with this router\n   */\n  routes: RouteConfig[];\n\n  /**\n  * The [[Router]]'s current base URL, typically based on the [[Router.currentInstruction]].\n  */\n  baseUrl: string;\n\n  /**\n   * If defined, used in generation of document title for [[Router]]'s routes.\n   */\n  title: string | undefined;\n\n  /**\n   * The separator used in the document title between [[Router]]'s routes.\n   */\n  titleSeparator: string | undefined;\n\n  /**\n  * True if the [[Router]] has been configured.\n  */\n  isConfigured: boolean;\n\n  /**\n  * True if the [[Router]] is currently processing a navigation.\n  */\n  isNavigating: boolean;\n\n  /**\n  * True if the [[Router]] is navigating due to explicit call to navigate function(s).\n  */\n  isExplicitNavigation: boolean;\n\n  /**\n  * True if the [[Router]] is navigating due to explicit call to navigateBack function.\n  */\n  isExplicitNavigationBack: boolean;\n\n  /**\n  * True if the [[Router]] is navigating into the app for the first time in the browser session.\n  */\n  isNavigatingFirst: boolean;\n\n  /**\n  * True if the [[Router]] is navigating to a page instance not in the browser session history.\n  */\n  isNavigatingNew: boolean;\n\n  /**\n  * True if the [[Router]] is navigating forward in the browser session history.\n  */\n  isNavigatingForward: boolean;\n\n  /**\n  * True if the [[Router]] is navigating back in the browser session history.\n  */\n  isNavigatingBack: boolean;\n\n  /**\n  * True if the [[Router]] is navigating due to a browser refresh.\n  */\n  isNavigatingRefresh: boolean;\n\n  /**\n  * True if the previous instruction successfully completed the CanDeactivatePreviousStep in the current navigation.\n  */\n  couldDeactivate: boolean;\n\n  /**\n  * The currently active navigation tracker.\n  */\n  currentNavigationTracker: number;\n\n  /**\n  * The navigation models for routes that specified [[RouteConfig.nav]].\n  */\n  navigation: NavModel[];\n\n  /**\n  * The currently active navigation instruction.\n  */\n  currentInstruction: NavigationInstruction;\n\n  /**\n  * The parent router, or null if this instance is not a child router.\n  */\n  parent: Router = null;\n\n  options: any = {};\n\n  /**\n  * The defaults used when a viewport lacks specified content\n  */\n  viewPortDefaults: Record<string, any> = {};\n\n  /**@internal */\n  catchAllHandler: (instruction: NavigationInstruction) => NavigationInstruction | Promise<NavigationInstruction>;\n  /**@internal */\n  fallbackRoute: string;\n  /**@internal */\n  pipelineProvider: PipelineProvider;\n  /**@internal */\n  _fallbackOrder: number;\n  /**@internal */\n  _recognizer: RouteRecognizer;\n  /**@internal */\n  _childRecognizer: RouteRecognizer;\n  /**@internal */\n  _configuredPromise: Promise<any>;\n  /**@internal */\n  _resolveConfiguredPromise: (value?: any) => void;\n\n  /**\n  * Extension point to transform the document title before it is built and displayed.\n  * By default, child routers delegate to the parent router, and the app router\n  * returns the title unchanged.\n  */\n  transformTitle: (title: string) => string = (title: string) => {\n    if (this.parent) {\n      return this.parent.transformTitle(title);\n    }\n    return title;\n  }\n\n  /**\n  * @param container The [[Container]] to use when child routers.\n  * @param history The [[History]] implementation to delegate navigation requests to.\n  */\n  constructor(container: Container, history: History) {\n    this.container = container;\n    this.history = history;\n    this.reset();\n  }\n\n  /**\n  * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\n  * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\n  */\n  reset() {\n    this.viewPorts = {};\n    this.routes = [];\n    this.baseUrl = '';\n    this.isConfigured = false;\n    this.isNavigating = false;\n    this.isExplicitNavigation = false;\n    this.isExplicitNavigationBack = false;\n    this.isNavigatingFirst = false;\n    this.isNavigatingNew = false;\n    this.isNavigatingRefresh = false;\n    this.isNavigatingForward = false;\n    this.isNavigatingBack = false;\n    this.couldDeactivate = false;\n    this.navigation = [];\n    this.currentInstruction = null;\n    this.viewPortDefaults = {};\n    this._fallbackOrder = 100;\n    this._recognizer = new RouteRecognizer();\n    this._childRecognizer = new RouteRecognizer();\n    this._configuredPromise = new Promise(resolve => {\n      this._resolveConfiguredPromise = resolve;\n    });\n  }\n\n  /**\n  * Gets a value indicating whether or not this [[Router]] is the root in the router tree. I.e., it has no parent.\n  */\n  get isRoot(): boolean {\n    return !this.parent;\n  }\n\n  /**\n  * Registers a viewPort to be used as a rendering target for activated routes.\n  *\n  * @param viewPort The viewPort.\n  * @param name The name of the viewPort. 'default' if unspecified.\n  */\n  registerViewPort(viewPort: /*ViewPort*/any, name?: string): void {\n    name = name || 'default';\n    this.viewPorts[name] = viewPort;\n  }\n\n  /**\n  * Returns a Promise that resolves when the router is configured.\n  */\n  ensureConfigured(): Promise<void> {\n    return this._configuredPromise;\n  }\n\n  /**\n  * Configures the router.\n  *\n  * @param callbackOrConfig The [[RouterConfiguration]] or a callback that takes a [[RouterConfiguration]].\n  */\n  configure(callbackOrConfig: RouterConfiguration | ((config: RouterConfiguration) => RouterConfiguration)): Promise<void> {\n    this.isConfigured = true;\n\n    let result: RouterConfigurationResolution = callbackOrConfig as RouterConfiguration;\n    let config: RouterConfiguration;\n    if (typeof callbackOrConfig === 'function') {\n      config = new RouterConfiguration();\n      result = callbackOrConfig(config);\n    }\n\n    return Promise\n      .resolve(result)\n      .then((c) => {\n        if (c && (c as RouterConfiguration).exportToRouter) {\n          config = c;\n        }\n\n        config.exportToRouter(this);\n        this.isConfigured = true;\n        this._resolveConfiguredPromise();\n      });\n  }\n\n  /**\n  * Navigates to a new location.\n  *\n  * @param fragment The URL fragment to use as the navigation destination.\n  * @param options The navigation options.\n  */\n  navigate(fragment: string, options?: NavigationOptions): boolean {\n    if (!this.isConfigured && this.parent) {\n      return this.parent.navigate(fragment, options);\n    }\n\n    this.isExplicitNavigation = true;\n    return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);\n  }\n\n  /**\n  * Navigates to a new location corresponding to the route and params specified. Equivallent to [[Router.generate]] followed\n  * by [[Router.navigate]].\n  *\n  * @param route The name of the route to use when generating the navigation location.\n  * @param params The route parameters to be used when populating the route pattern.\n  * @param options The navigation options.\n  */\n  navigateToRoute(route: string, params?: any, options?: NavigationOptions): boolean {\n    let path = this.generate(route, params);\n    return this.navigate(path, options);\n  }\n\n  /**\n  * Navigates back to the most recent location in history.\n  */\n  navigateBack(): void {\n    this.isExplicitNavigationBack = true;\n    this.history.navigateBack();\n  }\n\n  /**\n   * Creates a child router of the current router.\n   *\n   * @param container The [[Container]] to provide to the child router. Uses the current [[Router]]'s [[Container]] if unspecified.\n   * @returns {Router} The new child Router.\n   */\n  createChild(container?: Container): Router {\n    let childRouter = new Router(container || this.container.createChild(), this.history);\n    childRouter.parent = this;\n    return childRouter;\n  }\n\n  /**\n  * Generates a URL fragment matching the specified route pattern.\n  *\n  * @param name The name of the route whose pattern should be used to generate the fragment.\n  * @param params The route params to be used to populate the route pattern.\n  * @param options If options.absolute = true, then absolute url will be generated; otherwise, it will be relative url.\n  * @returns {string} A string containing the generated URL fragment.\n  */\n  generate(nameOrRoute: string | RouteConfig, params: any = {}, options: any = {}): string {\n    // A child recognizer generates routes for potential child routes. Any potential child route is added\n    // to the childRoute property of params for the childRouter to recognize. When generating routes, we\n    // use the childRecognizer when childRoute params are available to generate a child router enabled route.\n    let recognizer = 'childRoute' in params ? this._childRecognizer : this._recognizer;\n    let hasRoute = recognizer.hasRoute(nameOrRoute as string | RouteHandler);\n    if (!hasRoute) {\n      if (this.parent) {\n        return this.parent.generate(nameOrRoute, params, options);\n      }\n      throw new Error(`A route with name '${nameOrRoute}' could not be found. Check that \\`name: '${nameOrRoute}'\\` was specified in the route's config.`);\n    }\n    let path = recognizer.generate(nameOrRoute as string | RouteHandler, params);\n    let rootedPath = _createRootedPath(path, this.baseUrl, this.history._hasPushState, options.absolute);\n    return options.absolute ? `${this.history.getAbsoluteRoot()}${rootedPath}` : rootedPath;\n  }\n\n  /**\n  * Creates a [[NavModel]] for the specified route config.\n  *\n  * @param config The route config.\n  */\n  createNavModel(config: RouteConfig): NavModel {\n    let navModel = new NavModel(\n      this,\n      'href' in config\n        ? config.href\n        // potential error when config.route is a string[] ?\n        : config.route as string);\n    navModel.title = config.title;\n    navModel.order = config.nav;\n    navModel.href = config.href;\n    navModel.settings = config.settings;\n    navModel.config = config;\n\n    return navModel;\n  }\n\n  /**\n  * Registers a new route with the router.\n  *\n  * @param config The [[RouteConfig]].\n  * @param navModel The [[NavModel]] to use for the route. May be omitted for single-pattern routes.\n  */\n  addRoute(config: RouteConfig, navModel?: NavModel): void {\n    if (Array.isArray(config.route)) {\n      let routeConfigs = _ensureArrayWithSingleRoutePerConfig(config);\n      // the following is wrong. todo: fix this after TS refactoring release\n      routeConfigs.forEach(this.addRoute.bind(this));\n      return;\n    }\n\n    validateRouteConfig(config);\n\n    if (!('viewPorts' in config) && !config.navigationStrategy) {\n      config.viewPorts = {\n        'default': {\n          moduleId: config.moduleId,\n          view: config.view\n        }\n      };\n    }\n\n    if (!navModel) {\n      navModel = this.createNavModel(config);\n    }\n\n    this.routes.push(config);\n\n    let path = config.route;\n    if (path.charAt(0) === '/') {\n      path = path.substr(1);\n    }\n    let caseSensitive = config.caseSensitive === true;\n    let state: State = this._recognizer.add({\n      path: path,\n      handler: config as RouteHandler,\n      caseSensitive: caseSensitive\n    } as ConfigurableRoute);\n\n    if (path) {\n      let settings = config.settings;\n      delete config.settings;\n      let withChild = JSON.parse(JSON.stringify(config));\n      config.settings = settings;\n      withChild.route = `${path}/*childRoute`;\n      withChild.hasChildRouter = true;\n      this._childRecognizer.add({\n        path: withChild.route,\n        handler: withChild,\n        caseSensitive: caseSensitive\n      });\n\n      withChild.navModel = navModel;\n      withChild.settings = config.settings;\n      withChild.navigationStrategy = config.navigationStrategy;\n    }\n\n    config.navModel = navModel;\n\n    let navigation = this.navigation;\n\n    if ((navModel.order || navModel.order === 0) && navigation.indexOf(navModel) === -1) {\n      if ((!navModel.href && navModel.href !== '') && (state.types.dynamics || state.types.stars)) {\n        throw new Error('Invalid route config for \"' + config.route + '\" : dynamic routes must specify an \"href:\" to be included in the navigation model.');\n      }\n\n      if (typeof navModel.order !== 'number') {\n        navModel.order = ++this._fallbackOrder;\n      }\n\n      navigation.push(navModel);\n      // this is a potential error / inconsistency between browsers\n      //\n      // MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\n      // If compareFunction(a, b) returns 0, leave a and b unchanged with respect to each other,\n      // but sorted with respect to all different elements.\n      // Note: the ECMAscript standard does not guarantee this behaviour,\n      // and thus not all browsers (e.g. Mozilla versions dating back to at least 2003) respect this.\n      navigation.sort((a, b) => <any>a.order - <any>b.order);\n    }\n  }\n\n  /**\n  * Gets a value indicating whether or not this [[Router]] or one of its ancestors has a route registered with the specified name.\n  *\n  * @param name The name of the route to check.\n  */\n  hasRoute(name: string): boolean {\n    return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));\n  }\n\n  /**\n  * Gets a value indicating whether or not this [[Router]] has a route registered with the specified name.\n  *\n  * @param name The name of the route to check.\n  */\n  hasOwnRoute(name: string): boolean {\n    return this._recognizer.hasRoute(name);\n  }\n\n  /**\n  * Register a handler to use when the incoming URL fragment doesn't match any registered routes.\n  *\n  * @param config The moduleId, or a function that selects the moduleId, or a [[RouteConfig]].\n  */\n  handleUnknownRoutes(config?: RouteConfigSpecifier): void {\n    if (!config) {\n      throw new Error('Invalid unknown route handler');\n    }\n\n    this.catchAllHandler = instruction => {\n      return this\n        ._createRouteConfig(config, instruction)\n        .then(c => {\n          instruction.config = c;\n          return instruction;\n        });\n    };\n  }\n\n  /**\n  * Updates the document title using the current navigation instruction.\n  */\n  updateTitle(): void {\n    let parentRouter = this.parent;\n    if (parentRouter) {\n      return parentRouter.updateTitle();\n    }\n\n    let currentInstruction = this.currentInstruction;\n    if (currentInstruction) {\n      currentInstruction._updateTitle();\n    }\n    return undefined;\n  }\n\n  /**\n  * Updates the navigation routes with hrefs relative to the current location.\n  * Note: This method will likely move to a plugin in a future release.\n  */\n  refreshNavigation(): void {\n    let nav = this.navigation;\n\n    for (let i = 0, length = nav.length; i < length; i++) {\n      let current = nav[i];\n      if (!current.config.href) {\n        current.href = _createRootedPath(current.relativeHref, this.baseUrl, this.history._hasPushState);\n      } else {\n        current.href = _normalizeAbsolutePath(current.config.href, this.history._hasPushState);\n      }\n    }\n  }\n\n  /**\n   * Sets the default configuration for the view ports. This specifies how to\n   *  populate a view port for which no module is specified. The default is\n   *  an empty view/view-model pair.\n   */\n  useViewPortDefaults($viewPortDefaults: Record<string, any>): void {\n    // a workaround to have strong typings while not requiring to expose interface ViewPortInstruction\n    let viewPortDefaults: Record<string, ViewPortInstruction> = $viewPortDefaults;\n    for (let viewPortName in viewPortDefaults) {\n      let viewPortConfig = viewPortDefaults[viewPortName];\n      this.viewPortDefaults[viewPortName] = {\n        moduleId: viewPortConfig.moduleId\n      };\n    }\n  }\n\n  /**@internal */\n  _refreshBaseUrl(): void {\n    let parentRouter = this.parent;\n    if (parentRouter) {\n      this.baseUrl = generateBaseUrl(parentRouter, parentRouter.currentInstruction);\n    }\n  }\n\n  /**@internal */\n  _createNavigationInstruction(url: string = '', parentInstruction: NavigationInstruction = null): Promise<NavigationInstruction> {\n    let fragment = url;\n    let queryString = '';\n\n    let queryIndex = url.indexOf('?');\n    if (queryIndex !== -1) {\n      fragment = url.substr(0, queryIndex);\n      queryString = url.substr(queryIndex + 1);\n    }\n\n    let urlRecognizationResults = this._recognizer.recognize(url) as IRouteRecognizationResults;\n    if (!urlRecognizationResults || !urlRecognizationResults.length) {\n      urlRecognizationResults = this._childRecognizer.recognize(url) as IRouteRecognizationResults;\n    }\n\n    let instructionInit: NavigationInstructionInit = {\n      fragment,\n      queryString,\n      config: null,\n      parentInstruction,\n      previousInstruction: this.currentInstruction,\n      router: this,\n      options: {\n        compareQueryParams: this.options.compareQueryParams\n      }\n    };\n\n    let result: Promise<NavigationInstruction>;\n\n    if (urlRecognizationResults && urlRecognizationResults.length) {\n      let first = urlRecognizationResults[0];\n      let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n        params: first.params,\n        queryParams: first.queryParams || urlRecognizationResults.queryParams,\n        config: first.config || first.handler\n      }));\n\n      if (typeof first.handler === 'function') {\n        result = evaluateNavigationStrategy(instruction, first.handler, first);\n      } else if (first.handler && typeof first.handler.navigationStrategy === 'function') {\n        result = evaluateNavigationStrategy(instruction, first.handler.navigationStrategy, first.handler);\n      } else {\n        result = Promise.resolve(instruction);\n      }\n    } else if (this.catchAllHandler) {\n      let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n        params: { path: fragment },\n        queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\n        config: null // config will be created by the catchAllHandler\n      }));\n\n      result = evaluateNavigationStrategy(instruction, this.catchAllHandler);\n    } else if (this.parent) {\n      let router = this._parentCatchAllHandler(this.parent);\n\n      if (router) {\n        let newParentInstruction = this._findParentInstructionFromRouter(router, parentInstruction);\n\n        let instruction = new NavigationInstruction(Object.assign({}, instructionInit, {\n          params: { path: fragment },\n          queryParams: urlRecognizationResults ? urlRecognizationResults.queryParams : {},\n          router: router,\n          parentInstruction: newParentInstruction,\n          parentCatchHandler: true,\n          config: null // config will be created by the chained parent catchAllHandler\n        }));\n\n        result = evaluateNavigationStrategy(instruction, router.catchAllHandler);\n      }\n    }\n\n    if (result && parentInstruction) {\n      this.baseUrl = generateBaseUrl(this.parent, parentInstruction);\n    }\n\n    return result || Promise.reject(new Error(`Route not found: ${url}`));\n  }\n\n  /**@internal */\n  _findParentInstructionFromRouter(router: Router, instruction: NavigationInstruction): NavigationInstruction {\n    if (instruction.router === router) {\n      instruction.fragment = router.baseUrl; // need to change the fragment in case of a redirect instead of moduleId\n      return instruction;\n    } else if (instruction.parentInstruction) {\n      return this._findParentInstructionFromRouter(router, instruction.parentInstruction);\n    }\n    return undefined;\n  }\n\n  /**@internal */\n  _parentCatchAllHandler(router: Router): Router | false {\n    if (router.catchAllHandler) {\n      return router;\n    } else if (router.parent) {\n      return this._parentCatchAllHandler(router.parent);\n    }\n    return false;\n  }\n\n  /**\n   * @internal\n   */\n  _createRouteConfig(config: RouteConfigSpecifier, instruction: NavigationInstruction): Promise<RouteConfig> {\n    return Promise\n      .resolve(config)\n      .then((c: any) => {\n        if (typeof c === 'string') {\n          return { moduleId: c } as RouteConfig;\n        } else if (typeof c === 'function') {\n          return c(instruction);\n        }\n\n        return c;\n      })\n      // typing here could be either RouteConfig or RedirectConfig\n      // but temporarily treat both as RouteConfig\n      // todo: improve typings precision\n      .then((c: string | RouteConfig) => typeof c === 'string' ? { moduleId: c } as RouteConfig : c)\n      .then((c: RouteConfig) => {\n        c.route = instruction.params.path;\n        validateRouteConfig(c);\n\n        if (!c.navModel) {\n          c.navModel = this.createNavModel(c);\n        }\n\n        return c;\n      });\n  }\n}\n\n/* @internal exported for unit testing */\nexport const generateBaseUrl = (router: Router, instruction: NavigationInstruction): string => {\n  return `${router.baseUrl || ''}${instruction.getBaseUrl() || ''}`;\n};\n\n/* @internal exported for unit testing */\nexport const validateRouteConfig = (config: RouteConfig): void => {\n  if (typeof config !== 'object') {\n    throw new Error('Invalid Route Config');\n  }\n\n  if (typeof config.route !== 'string') {\n    let name = config.name || '(no name)';\n    throw new Error('Invalid Route Config for \"' + name + '\": You must specify a \"route:\" pattern.');\n  }\n\n  if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {\n    throw new Error('Invalid Route Config for \"' + config.route + '\": You must specify a \"moduleId:\", \"redirect:\", \"navigationStrategy:\", or \"viewPorts:\".');\n  }\n};\n\n/* @internal exported for unit testing */\nexport const evaluateNavigationStrategy = (\n  instruction: NavigationInstruction,\n  evaluator: Function,\n  context?: any\n): Promise<NavigationInstruction> => {\n  return Promise.resolve(evaluator.call(context, instruction)).then(() => {\n    if (!('viewPorts' in instruction.config)) {\n      instruction.config.viewPorts = {\n        'default': {\n          moduleId: instruction.config.moduleId\n        }\n      };\n    }\n\n    return instruction;\n  });\n};\n\ninterface IRouteRecognizationResults extends Array<RecognizedRoute> {\n  queryParams: Record<string, any>;\n}\n","import { PipelineStatus } from './pipeline-status';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { Next, StepRunnerFunction, NextCompletionHandler } from './interfaces';\n\n/**@internal exported for unit testing */\nexport const createNextFn = (instruction: NavigationInstruction, steps: StepRunnerFunction[]): Next => {\n  let index = -1;\n  const next: Next = function() {\n    index++;\n\n    if (index < steps.length) {\n      let currentStep = steps[index];\n\n      try {\n        return currentStep(instruction, next);\n      } catch (e) {\n        return next.reject(e);\n      }\n    } else {\n      return next.complete();\n    }\n  } as Next;\n\n  next.complete = createCompletionHandler(next, PipelineStatus.Completed);\n  next.cancel = createCompletionHandler(next, PipelineStatus.Canceled);\n  next.reject = createCompletionHandler(next, PipelineStatus.Rejected);\n\n  return next;\n};\n\n/**@internal exported for unit testing */\nexport const createCompletionHandler = (next: Next, status: PipelineStatus): NextCompletionHandler => {\n  return (output: any) => Promise\n    .resolve({\n      status,\n      output,\n      completed: status === PipelineStatus.Completed\n    });\n};\n","import { PipelineStep, PipelineResult, Next, StepRunnerFunction, IPipelineSlot } from './interfaces';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { createNextFn } from './next';\n\n/**\n* The class responsible for managing and processing the navigation pipeline.\n*/\nexport class Pipeline {\n  /**\n  * The pipeline steps. And steps added via addStep will be converted to a function\n  * The actualy running functions with correct step contexts of this pipeline\n  */\n  steps: StepRunnerFunction[] = [];\n\n  /**\n  * Adds a step to the pipeline.\n  *\n  * @param step The pipeline step.\n  */\n  addStep(step: StepRunnerFunction | PipelineStep | IPipelineSlot): Pipeline {\n    let run;\n\n    if (typeof step === 'function') {\n      run = step;\n    } else if (typeof step.getSteps === 'function') {\n      // getSteps is to enable support open slots\n      // where devs can add multiple steps into the same slot name\n      let steps = step.getSteps();\n      for (let i = 0, l = steps.length; i < l; i++) {\n        this.addStep(steps[i]);\n      }\n\n      return this;\n    } else {\n      run = (step as PipelineStep).run.bind(step);\n    }\n\n    this.steps.push(run);\n\n    return this;\n  }\n\n  /**\n  * Runs the pipeline.\n  *\n  * @param instruction The navigation instruction to process.\n  */\n  run(instruction: NavigationInstruction): Promise<PipelineResult> {\n    const nextFn = createNextFn(instruction, this.steps);\n    return nextFn();\n  }\n}\n","import { Next, RouteConfig, ViewPortComponent, ViewPortPlan, ViewPortInstruction } from './interfaces';\nimport { Redirect } from './navigation-commands';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { activationStrategy, _buildNavigationPlan } from './navigation-plan';\nimport { Router } from './router';\n\n/**\n * Loading plan calculated based on a navigration-instruction and a viewport plan\n */\ninterface ILoadingPlan {\n  viewPortPlan: ViewPortPlan;\n  navigationInstruction: NavigationInstruction;\n}\n\n/**\n * Abstract class that is responsible for loading view / view model from a route config\n * The default implementation can be found in `aurelia-templating-router`\n */\nexport class RouteLoader {\n  /**\n   * Load a route config based on its viewmodel / view configuration\n   */\n  // return typing: return typings used to be never\n  // as it was a throw. Changing it to Promise<any> should not cause any issues\n  loadRoute(router: Router, config: RouteConfig, navigationInstruction: NavigationInstruction): Promise<any> {\n    throw new Error('Route loaders must implement \"loadRoute(router, config, navigationInstruction)\".');\n  }\n}\n\n/**\n * A pipeline step responsible for loading a route config of a navigation instruction\n */\nexport class LoadRouteStep {\n  /**@internal */\n  static inject() { return [RouteLoader]; }\n  /**\n   * Route loader isntance that will handle loading route config\n   * @internal\n   */\n  routeLoader: RouteLoader;\n\n  constructor(routeLoader: RouteLoader) {\n    this.routeLoader = routeLoader;\n  }\n\n  /**\n   * Run the internal to load route config of a navigation instruction to prepare for next steps in the pipeline\n   */\n  run(navigationInstruction: NavigationInstruction, next: Next): Promise<any> {\n    return loadNewRoute(this.routeLoader, navigationInstruction)\n      .then(next, next.cancel);\n  }\n}\n\n/**\n * @internal Exported for unit testing\n */\nexport const loadNewRoute = (\n  routeLoader: RouteLoader,\n  navigationInstruction: NavigationInstruction\n): Promise<any[] | void> => {\n  let toLoad = determineWhatToLoad(navigationInstruction);\n  let loadPromises = toLoad.map((loadingPlan: ILoadingPlan) => loadRoute(\n    routeLoader,\n    loadingPlan.navigationInstruction,\n    loadingPlan.viewPortPlan\n  ));\n\n  return Promise.all(loadPromises);\n};\n\n/**\n * @internal Exported for unit testing\n */\nexport const determineWhatToLoad = (\n  navigationInstruction: NavigationInstruction,\n  toLoad: ILoadingPlan[] = []\n): ILoadingPlan[] => {\n  let plan: Record<string, ViewPortPlan> = navigationInstruction.plan;\n\n  for (let viewPortName in plan) {\n    let viewPortPlan = plan[viewPortName];\n    let child_nav_instruction = viewPortPlan.childNavigationInstruction;\n\n    if (viewPortPlan.strategy === activationStrategy.replace) {\n      toLoad.push({ viewPortPlan, navigationInstruction } as ILoadingPlan);\n\n      if (child_nav_instruction) {\n        determineWhatToLoad(child_nav_instruction, toLoad);\n      }\n    } else {\n      let viewPortInstruction = navigationInstruction.addViewPortInstruction(\n        viewPortName,\n        viewPortPlan.strategy,\n        viewPortPlan.prevModuleId,\n        viewPortPlan.prevComponent\n      ) as ViewPortInstruction;\n\n      if (child_nav_instruction) {\n        viewPortInstruction.childNavigationInstruction = child_nav_instruction;\n        determineWhatToLoad(child_nav_instruction, toLoad);\n      }\n    }\n  }\n\n  return toLoad;\n};\n\n/**\n * @internal Exported for unit testing\n */\nexport const loadRoute = (\n  routeLoader: RouteLoader,\n  navigationInstruction: NavigationInstruction,\n  viewPortPlan: ViewPortPlan\n): Promise<any> => {\n  let moduleId = viewPortPlan.config ? viewPortPlan.config.moduleId : null;\n\n  return loadComponent(routeLoader, navigationInstruction, viewPortPlan.config)\n    .then((component) => {\n      let viewPortInstruction = navigationInstruction.addViewPortInstruction(\n        viewPortPlan.name,\n        viewPortPlan.strategy,\n        moduleId,\n        component\n      ) as ViewPortInstruction;\n\n      let childRouter = component.childRouter;\n      if (childRouter) {\n        let path = navigationInstruction.getWildcardPath();\n\n        return childRouter\n          ._createNavigationInstruction(path, navigationInstruction)\n          .then((childInstruction) => {\n            viewPortPlan.childNavigationInstruction = childInstruction;\n\n            return _buildNavigationPlan(childInstruction)\n              .then((childPlan) => {\n                if (childPlan instanceof Redirect) {\n                  return Promise.reject(childPlan);\n                }\n                childInstruction.plan = childPlan;\n                viewPortInstruction.childNavigationInstruction = childInstruction;\n\n                return loadNewRoute(routeLoader, childInstruction);\n              });\n          });\n      }\n      // ts complains without this, though they are same\n      return void 0;\n    });\n};\n\n/**\n * Load a routed-component based on navigation instruction and route config\n * @internal exported for unit testing only\n */\nexport const loadComponent = (\n  routeLoader: RouteLoader,\n  navigationInstruction: NavigationInstruction,\n  config: RouteConfig\n): Promise<ViewPortComponent> => {\n  let router = navigationInstruction.router;\n  let lifecycleArgs = navigationInstruction.lifecycleArgs;\n\n  return Promise.resolve()\n    .then(() => routeLoader.loadRoute(router, config, navigationInstruction))\n    .then(\n      /**\n       * @param component an object carrying information about loaded route\n       * typically contains information about view model, childContainer, view and router\n       */\n      (component: ViewPortComponent) => {\n      let { viewModel, childContainer } = component;\n      component.router = router;\n      component.config = config;\n\n      if ('configureRouter' in viewModel) {\n        let childRouter = childContainer.getChildRouter();\n        component.childRouter = childRouter;\n\n        return childRouter\n          .configure(c => viewModel.configureRouter(c, childRouter, lifecycleArgs[0], lifecycleArgs[1], lifecycleArgs[2]))\n          .then(() => component);\n      }\n\n      return component;\n    });\n};\n","import { Container } from 'aurelia-dependency-injection';\nimport { Pipeline } from './pipeline';\nimport { BuildNavigationPlanStep } from './navigation-plan';\nimport { LoadRouteStep } from './route-loading';\nimport { CommitChangesStep } from './navigation-instruction';\nimport {\n  CanDeactivatePreviousStep,\n  CanActivateNextStep,\n  DeactivatePreviousStep,\n  ActivateNextStep\n} from './activation';\nimport { PipelineStep, StepRunnerFunction, IPipelineSlot } from './interfaces';\nimport { PipelineSlotName } from './pipeline-slot-name';\n\n/**\n * A multi-slots Pipeline Placeholder Step for hooking into a pipeline execution\n */\nclass PipelineSlot implements IPipelineSlot {\n\n  /**@internal */\n  container: Container;\n  /**@internal */\n  slotName: string;\n  /**@internal */\n  slotAlias?: string;\n\n  steps: (Function | PipelineStep)[] = [];\n\n  constructor(container: Container, name: string, alias?: string) {\n    this.container = container;\n    this.slotName = name;\n    this.slotAlias = alias;\n  }\n\n  getSteps(): (StepRunnerFunction | IPipelineSlot | PipelineStep)[] {\n    return this.steps.map(x => this.container.get(x));\n  }\n}\n\n/**\n* Class responsible for creating the navigation pipeline.\n*/\nexport class PipelineProvider {\n\n  /**@internal */\n  static inject() { return [Container]; }\n  /**@internal */\n  container: Container;\n  /**@internal */\n  steps: (Function | PipelineSlot)[];\n\n  constructor(container: Container) {\n    this.container = container;\n    this.steps = [\n      BuildNavigationPlanStep,\n      CanDeactivatePreviousStep, // optional\n      LoadRouteStep,\n      this._createPipelineSlot(PipelineSlotName.Authorize),\n      CanActivateNextStep, // optional\n      this._createPipelineSlot(PipelineSlotName.PreActivate, 'modelbind'),\n      // NOTE: app state changes start below - point of no return\n      DeactivatePreviousStep, // optional\n      ActivateNextStep, // optional\n      this._createPipelineSlot(PipelineSlotName.PreRender, 'precommit'),\n      CommitChangesStep,\n      this._createPipelineSlot(PipelineSlotName.PostRender, 'postcomplete')\n    ];\n  }\n\n  /**\n  * Create the navigation pipeline.\n  */\n  createPipeline(useCanDeactivateStep: boolean = true): Pipeline {\n    let pipeline = new Pipeline();\n    this.steps.forEach(step => {\n      if (useCanDeactivateStep || step !== CanDeactivatePreviousStep) {\n        pipeline.addStep(this.container.get(step));\n      }\n    });\n    return pipeline;\n  }\n\n  /**@internal */\n  _findStep(name: string): PipelineSlot {\n    // Steps that are not PipelineSlots are constructor functions, and they will automatically fail. Probably.\n    return this.steps.find(x => (x as PipelineSlot).slotName === name || (x as PipelineSlot).slotAlias === name) as PipelineSlot;\n  }\n\n  /**\n  * Adds a step into the pipeline at a known slot location.\n  */\n  addStep(name: string, step: PipelineStep | Function): void {\n    let found = this._findStep(name);\n    if (found) {\n      // prevent duplicates\n      if (!found.steps.includes(step)) {\n        found.steps.push(step);\n      }\n    } else {\n      throw new Error(`Invalid pipeline slot name: ${name}.`);\n    }\n  }\n\n  /**\n   * Removes a step from a slot in the pipeline\n   */\n  removeStep(name: string, step: PipelineStep): void {\n    let slot = this._findStep(name);\n    if (slot) {\n      let steps = slot.steps;\n      steps.splice(steps.indexOf(step), 1);\n    }\n  }\n\n  /**\n   * @internal\n   * Clears all steps from a slot in the pipeline\n   */\n  _clearSteps(name: string = ''): void {\n    let slot = this._findStep(name);\n    if (slot) {\n      slot.steps = [];\n    }\n  }\n\n  /**\n   * Resets all pipeline slots\n   */\n  reset(): void {\n    this._clearSteps('authorize');\n    this._clearSteps('preActivate');\n    this._clearSteps('preRender');\n    this._clearSteps('postRender');\n  }\n\n  /**@internal */\n  _createPipelineSlot(name: string, alias?: string): PipelineSlot {\n    return new PipelineSlot(this.container, name, alias);\n  }\n}\n","import * as LogManager from 'aurelia-logging';\nimport { Container } from 'aurelia-dependency-injection';\nimport { History, NavigationOptions } from 'aurelia-history';\nimport { Router } from './router';\nimport { PipelineProvider } from './pipeline-provider';\nimport { isNavigationCommand } from './navigation-commands';\nimport { EventAggregator } from 'aurelia-event-aggregator';\nimport { NavigationInstruction } from './navigation-instruction';\nimport { ViewPort, ConfiguresRouter, PipelineResult } from './interfaces';\nimport { RouterEvent } from './router-event';\n\n/**@internal */\ndeclare module 'aurelia-dependency-injection' {\n  interface Container {\n    viewModel?: any;\n  }\n}\n\nconst logger = LogManager.getLogger('app-router');\n\n/**\n* The main application router.\n*/\nexport class AppRouter extends Router {\n\n  /**@internal */\n  static inject() { return [Container, History, PipelineProvider, EventAggregator]; }\n\n  events: EventAggregator;\n  /**@internal */\n  maxInstructionCount: number;\n  /**@internal */\n  _queue: NavigationInstruction[];\n  /**@internal */\n  isActive: boolean;\n\n  constructor(container: Container, history: History, pipelineProvider: PipelineProvider, events: EventAggregator) {\n    super(container, history); // Note the super will call reset internally.\n    this.pipelineProvider = pipelineProvider;\n    this.events = events;\n  }\n\n  /**\n  * Fully resets the router's internal state. Primarily used internally by the framework when multiple calls to setRoot are made.\n  * Use with caution (actually, avoid using this). Do not use this to simply change your navigation model.\n  */\n  reset(): void {\n    super.reset();\n    this.maxInstructionCount = 10;\n    if (!this._queue) {\n      this._queue = [];\n    } else {\n      this._queue.length = 0;\n    }\n  }\n\n  /**\n  * Loads the specified URL.\n  *\n  * @param url The URL fragment to load.\n  */\n  loadUrl(url: string): Promise<NavigationInstruction> {\n    return this\n      ._createNavigationInstruction(url)\n      .then(instruction => this._queueInstruction(instruction))\n      .catch(error => {\n        logger.error(error);\n        restorePreviousLocation(this);\n      });\n  }\n\n  /**\n  * Registers a viewPort to be used as a rendering target for activated routes.\n  *\n  * @param viewPort The viewPort. This is typically a <router-view/> element in Aurelia default impl\n  * @param name The name of the viewPort. 'default' if unspecified.\n  */\n  registerViewPort(viewPort: /*ViewPort*/ any, name?: string): Promise<any> {\n    // having strong typing without changing public API\n    const $viewPort: ViewPort = viewPort;\n    super.registerViewPort($viewPort, name);\n\n    // beside adding viewport to the registry of this instance\n    // AppRouter also configure routing/history to start routing functionality\n    // There are situation where there are more than 1 <router-view/> element at root view\n    // in that case, still only activate once via the following guard\n    if (!this.isActive) {\n      const viewModel = this._findViewModel($viewPort);\n      if ('configureRouter' in viewModel) {\n        // If there are more than one <router-view/> element at root view\n        // use this flag to guard against configure method being invoked multiple times\n        // this flag is set inside method configure\n        if (!this.isConfigured) {\n          // replace the real resolve with a noop to guarantee that any action in base class Router\n          // won't resolve the configurePromise prematurely\n          const resolveConfiguredPromise = this._resolveConfiguredPromise;\n          this._resolveConfiguredPromise = () => {/**/};\n          return this\n            .configure(config => {\n              viewModel.configureRouter(config, this);\n              return config;\n            })\n            .then(() => {\n              this.activate();\n              resolveConfiguredPromise();\n            });\n        }\n      } else {\n        this.activate();\n      }\n    }\n    // when a viewport is added dynamically to a root view that is already activated\n    // just process the navigation instruction\n    else {\n      this._dequeueInstruction();\n    }\n\n    return Promise.resolve();\n  }\n\n  /**\n  * Activates the router. This instructs the router to begin listening for history changes and processing instructions.\n  *\n  * @params options The set of options to activate the router with.\n  */\n  activate(options?: NavigationOptions): void {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n    // route handler property is responsible for handling url change\n    // the interface of aurelia-history isn't clear on this perspective\n    this.options = Object.assign({ routeHandler: this.loadUrl.bind(this) }, this.options, options);\n    this.history.activate(this.options);\n    this._dequeueInstruction();\n  }\n\n  /**\n  * Deactivates the router.\n  */\n  deactivate(): void {\n    this.isActive = false;\n    this.history.deactivate();\n  }\n\n  /**@internal */\n  _queueInstruction(instruction: NavigationInstruction): Promise<any> {\n    return new Promise((resolve) => {\n      instruction.resolve = resolve;\n      this._queue.unshift(instruction);\n      this._dequeueInstruction();\n    });\n  }\n\n  /**@internal */\n  _dequeueInstruction(instructionCount: number = 0): Promise<PipelineResult | void> {\n    return Promise.resolve().then(() => {\n      if (this.isNavigating && !instructionCount) {\n        // ts complains about inconsistent returns without void 0\n        return void 0;\n      }\n\n      let instruction = this._queue.shift();\n      this._queue.length = 0;\n\n      if (!instruction) {\n        // ts complains about inconsistent returns without void 0\n        return void 0;\n      }\n\n      this.isNavigating = true;\n\n      let navtracker: number = this.history.getState('NavigationTracker');\n      if (!navtracker && !this.currentNavigationTracker) {\n        this.isNavigatingFirst = true;\n        this.isNavigatingNew = true;\n      } else if (!navtracker) {\n        this.isNavigatingNew = true;\n      } else if (!this.currentNavigationTracker) {\n        this.isNavigatingRefresh = true;\n      } else if (this.currentNavigationTracker < navtracker) {\n        this.isNavigatingForward = true;\n      } else if (this.currentNavigationTracker > navtracker) {\n        this.isNavigatingBack = true;\n      } if (!navtracker) {\n        navtracker = Date.now();\n        this.history.setState('NavigationTracker', navtracker);\n      }\n      this.currentNavigationTracker = navtracker;\n\n      instruction.previousInstruction = this.currentInstruction;\n\n      if (!instructionCount) {\n        this.events.publish(RouterEvent.Processing, { instruction });\n      } else if (instructionCount === this.maxInstructionCount - 1) {\n        logger.error(`${instructionCount + 1} navigation instructions have been attempted without success. Restoring last known good location.`);\n        restorePreviousLocation(this);\n        return this._dequeueInstruction(instructionCount + 1);\n      } else if (instructionCount > this.maxInstructionCount) {\n        throw new Error('Maximum navigation attempts exceeded. Giving up.');\n      }\n\n      let pipeline = this.pipelineProvider.createPipeline(!this.couldDeactivate);\n\n      return pipeline\n        .run(instruction)\n        .then(result => processResult(instruction, result, instructionCount, this))\n        .catch(error => {\n          return { output: error instanceof Error ? error : new Error(error) } as PipelineResult;\n        })\n        .then(result => resolveInstruction(instruction, result, !!instructionCount, this));\n    });\n  }\n\n  /**@internal */\n  _findViewModel(viewPort: ViewPort): ConfiguresRouter | undefined {\n    if (this.container.viewModel) {\n      return this.container.viewModel;\n    }\n\n    if (viewPort.container) {\n      let container = viewPort.container;\n\n      while (container) {\n        if (container.viewModel) {\n          this.container.viewModel = container.viewModel;\n          return container.viewModel;\n        }\n\n        container = container.parent;\n      }\n    }\n\n    return undefined;\n  }\n}\n\nconst processResult = (\n  instruction: NavigationInstruction,\n  result: PipelineResult,\n  instructionCount: number,\n  router: AppRouter\n): Promise<PipelineResult> => {\n  if (!(result && 'completed' in result && 'output' in result)) {\n    result = result || {} as PipelineResult;\n    result.output = new Error(`Expected router pipeline to return a navigation result, but got [${JSON.stringify(result)}] instead.`);\n  }\n\n  let finalResult: PipelineResult = null;\n  let navigationCommandResult = null;\n  if (isNavigationCommand(result.output)) {\n    navigationCommandResult = result.output.navigate(router);\n  } else {\n    finalResult = result;\n\n    if (!result.completed) {\n      if (result.output instanceof Error) {\n        logger.error(result.output.toString());\n      }\n\n      restorePreviousLocation(router);\n    }\n  }\n\n  return Promise.resolve(navigationCommandResult)\n    .then(_ => router._dequeueInstruction(instructionCount + 1))\n    .then(innerResult => finalResult || innerResult || result);\n};\n\nconst resolveInstruction = (\n  instruction: NavigationInstruction,\n  result: PipelineResult,\n  isInnerInstruction: boolean,\n  router: AppRouter\n): PipelineResult => {\n  instruction.resolve(result);\n\n  let eventArgs = { instruction, result };\n  if (!isInnerInstruction) {\n    router.isNavigating = false;\n    router.isExplicitNavigation = false;\n    router.isExplicitNavigationBack = false;\n    router.isNavigatingFirst = false;\n    router.isNavigatingNew = false;\n    router.isNavigatingRefresh = false;\n    router.isNavigatingForward = false;\n    router.isNavigatingBack = false;\n    router.couldDeactivate = false;\n\n    let eventName: string;\n\n    if (result.output instanceof Error) {\n      eventName = RouterEvent.Error;\n    } else if (!result.completed) {\n      eventName = RouterEvent.Canceled;\n    } else {\n      let queryString = instruction.queryString ? ('?' + instruction.queryString) : '';\n      router.history.previousLocation = instruction.fragment + queryString;\n      eventName = RouterEvent.Success;\n    }\n\n    router.events.publish(eventName, eventArgs);\n    router.events.publish(RouterEvent.Complete, eventArgs);\n  } else {\n    router.events.publish(RouterEvent.ChildComplete, eventArgs);\n  }\n\n  return result;\n};\n\nconst restorePreviousLocation = (router: AppRouter): void => {\n  let previousLocation = router.history.previousLocation;\n  if (previousLocation) {\n    router.navigate(router.history.previousLocation, { trigger: false, replace: true });\n  } else if (router.fallbackRoute) {\n    router.navigate(router.fallbackRoute, { trigger: true, replace: true });\n  } else {\n    logger.error('Router navigation failed, and no previous location or fallbackRoute could be restored.');\n  }\n};\n","/**\n* The status of a Pipeline.\n*/\nexport const enum PipelineStatus {\n  Completed = 'completed',\n  Canceled = 'canceled',\n  Rejected = 'rejected',\n  Running = 'running'\n}\n","/**\n * A list of known router events used by the Aurelia router\n * to signal the pipeline has come to a certain state\n */\n// const enum is preserved in tsconfig\nexport const enum RouterEvent {\n  Processing = 'router:navigation:processing',\n  Error = 'router:navigation:error',\n  Canceled = 'router:navigation:canceled',\n  Complete = 'router:navigation:complete',\n  Success = 'router:navigation:success',\n  ChildComplete = 'router:navigation:child:complete'\n}\n","/**\n * Available pipeline slot names to insert interceptor into router pipeline\n */\n// const enum is preserved in tsconfig\nexport const enum PipelineSlotName {\n  /**\n   * Authorization slot. Invoked early in the pipeline,\n   * before `canActivate` hook of incoming route\n   */\n  Authorize = 'authorize',\n  /**\n   * Pre-activation slot. Invoked early in the pipeline,\n   * Invoked timing:\n   *   - after Authorization slot\n   *   - after canActivate hook on new view model\n   *   - before deactivate hook on old view model\n   *   - before activate hook on new view model\n   */\n  PreActivate = 'preActivate',\n  /**\n   * Pre-render slot. Invoked later in the pipeline\n   * Invokcation timing:\n   *   - after activate hook on new view model\n   *   - before commit step on new navigation instruction\n   */\n  PreRender = 'preRender',\n  /**\n   * Post-render slot. Invoked last in the pipeline\n   */\n  PostRender = 'postRender'\n}\n"],"names":["RouteRecognizer","Container","LogManager.getLogger","tslib_1.__extends","History","EventAggregator","PipelineStatus","RouterEvent","PipelineSlotName"],"mappings":"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"}